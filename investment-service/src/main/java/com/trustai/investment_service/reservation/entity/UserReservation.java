package com.trustai.investment_service.reservation.entity;

import com.trustai.investment_service.entity.InvestmentSchema;
import jakarta.persistence.*;
import lombok.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;

/*
    ## Royalty Vs ROI (Return on Investment)
    ### Royalty:
    **A royalty** is a **payment made to the owner of an asset (usually intellectual property)** for the right to use that asset. In finance or trading, royalties are common in industries like music, books, natural resources, and franchising — not so much in everyday stock or forex trading.

    ### ROI (Return on Investment):
    **ROI** measures how much **profit or loss** you’ve made on an investment, **relative to the initial cost**. It’s a performance metric used in **all types of trading and investing**.

    ##  Formula
    ### Royalty:  Typically calculated as a **percentage of revenue or profit** generated by using the asset.

 */
@Entity // stake_reservations
@Table(name = "user_reservations", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"user_id", "reservation_date"}) // Enforced at DB level: "Only One Reservation Per Day"
})
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserReservation {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "user_id", nullable = false)
    private Long userId;

    @ManyToOne(optional = false)
    @JoinColumn(name = "schema_id")
    private InvestmentSchema schema;

    @Column(nullable = false, precision = 19, scale = 4)
    private BigDecimal reservedAmount;
    @Column(precision = 19, scale = 4)
    private BigDecimal valuationDelta = BigDecimal.ZERO;
    @Column(nullable = true, precision = 19, scale = 4)
    private BigDecimal soldAmount;
    @Column(nullable = true, precision = 19, scale = 4)
    private BigDecimal profit;

    @Column(name = "reserved_at", nullable = false)
    private LocalDateTime reservedAt;


    @Column(name = "expiry_at", nullable = false)
    private LocalDateTime expiryAt; // = reservedAt + 1 day

    private boolean isSold = false;
    private LocalDateTime soldAt;

    private BigDecimal incomeEarned = BigDecimal.ZERO;

    @Column(name = "reservation_date", nullable = false)
    private LocalDate reservationDate; // for uniqueness per day

    @PrePersist
    public void prePersist() {
        if (reservedAt == null) {
            reservedAt = LocalDateTime.now();
        }
        if (reservationDate == null) {
            reservationDate = reservedAt.toLocalDate();
        }
        if (expiryAt == null) {
            expiryAt = reservedAt.plusDays(1);
        }
    }

    public boolean isActive() {
        return !isSold && LocalDateTime.now().isBefore(expiryAt);
    }
}
